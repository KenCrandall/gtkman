#!/usr/bin/env python

import gtk
import os
import sys
import commands
import pango

# Internationalization
import locale
import gettext
import gtk.glade
gettext.bindtextdomain("gtkman", "/usr/share/locale")
gettext.textdomain("gtkman")
gettext.install("gtkman", "/usr/share/locale", unicode=1)
gtk.glade.bindtextdomain("gtkman", "/usr/share/locale")
gtk.glade.textdomain("gtkman")

class GTKMan:
	def set_default_window_size(self):
		try:
			w = gtk.gdk.get_default_root_window()
			p = gtk.gdk.atom_intern('_NET_WORKAREA')
			width, height = w.property_get(p)[2][2:4]
			if width < 650:
				req_width = width
			else:
				req_width = 650
			req_height = height*0.8
			if req_height < 400:
				req_height = height
			self.window.set_default_size(int(req_width), int(req_height))
		except TypeError:
			self.window.set_default_size(640, 400)

	def manpage(self, section, page):
		if section == 0:
			section = ""
		cmd = 'man -P "col -b" '+str(section)+' '+page
		status, output = commands.getstatusoutput(cmd)
		if status == 0:
			# Fix some broken manpages (eg.: xterm, bash)
			retval = output.replace('\ngzip: stdout: Broken pipe\n', '')
		else:
			retval = _('No manual page found for "%(name)s"') % {'name' : page}
		return retval

	def manpage_stripchars(self, manpage):
		return manpage.lstrip(' ').partition(' ')[0].partition(';')[0].partition('|')[0].partition('&')[0]

	def on_entry_search_activate(self, widget):
		searchstr = self.entry_search.get_text()
		manpage = self.manpage_stripchars(searchstr)
		section = self.combobox_section.get_active()
		output = self.manpage(section, manpage)
		self.textbuffer_manpage.set_text(output)
		
	def on_entry_search_icon_release(self, widget, icon, event):
		if icon.value_name == 'GTK_ENTRY_ICON_PRIMARY':
			if len(self.entry_search.get_text()) != 0:
				self.entry_search.set_text('')
		else:
			searchstr = self.entry_search.get_text()
			manpage = self.manpage_stripchars(searchstr)
			section = self.combobox_section.get_active()
			output = self.manpage(section, manpage)
			self.textbuffer_manpage.set_text(output)
	
	def gtk_main_quit(self, widget, data=None):
		gtk.main_quit()

	def display_help(self):
		print _('USAGE:'),os.path.basename(sys.argv[0]),_('[OPTIONS] [[section] manpage]')
		print
		print _('OPTIONS:')
		print '   -h, --help        ',_('this help message')

	def on_imagemenuitem_about_activate(self, widget):
		self.aboutdialog.show()

	def on_aboutdialog_response(self, widget, data=None):
		self.aboutdialog.hide()
	
	def on_aboutdialog_delete_event(self, widget, event):
		self.aboutdialog.hide()
		return True

	def parse_args(self, argv):
		if len(argv) > 2:
			self.display_help()
			sys.exit(2)
		elif len(argv) == 2:
			try:
				section = int(argv[0])
				searchstr = argv[1]
				manpage = self.manpage_stripchars(searchstr)
				output = self.manpage(section, manpage)
				self.combobox_section.set_active(section)
				self.textbuffer_manpage.set_text(output)
				self.entry_search.set_text(manpage)
			except ValueError:
				self.display_help()
				sys.exit(2)
		elif len(argv) == 1:
			if argv[0] == '--help' or argv[0] == '-h':
				self.display_help()
				sys.exit(0)
			else:
				searchstr = argv[0]
				manpage = self.manpage_stripchars(searchstr)
				section = 0
				output = self.manpage(section, manpage)
				self.textbuffer_manpage.set_text(output)
				self.entry_search.set_text(manpage)

	def __init__(self):
		builder = gtk.Builder()
		if os.path.exists('gtkman.glade'):
			builder.add_from_file('gtkman.glade')
		elif os.path.exists('/usr/share/gtkman/gtkman.glade'):
			builder.add_from_file('/usr/share/gtkman/gtkman.glade')
		self.window = builder.get_object('gtkman')

		#
		# Main window
		#
		self.window = builder.get_object('gtkman')
		self.textview_manpage = builder.get_object('textview_manpage')
		self.textbuffer_manpage = builder.get_object('textbuffer_manpage')
		self.entry_search = builder.get_object('entry_search')
		self.combobox_section = builder.get_object('combobox_section')
		self.liststore_section = builder.get_object('liststore_section')
		# Populate the man section combobox
		self.liststore_section.append([0, _('Any')])
		self.liststore_section.append([1, _('User commands (1)')])
		self.liststore_section.append([2, _('System calls (2)')])
		self.liststore_section.append([3, _('C library functions (3)')])
		self.liststore_section.append([4, _('Devices and special files (4)')])
		self.liststore_section.append([5, _('File formats and conventions (5)')])
		self.liststore_section.append([6, _('Games et. al (6)')])
		self.liststore_section.append([7, _('Miscellanea (7)')])
		self.liststore_section.append([8, _('System administration tools and deamons (8)')])
		self.combobox_section.set_active(0)
		
		#
		# About dialog
		#
		self.aboutdialog = builder.get_object('aboutdialog')

		# Set default window size
		self.set_default_window_size()
		
		# Set font
		self.textview_manpage.modify_font(pango.FontDescription('terminus 12'))

		builder.connect_signals(self)

if __name__ == "__main__":
	app = GTKMan()
	app.parse_args(sys.argv[1:])
	app.window.show()
	gtk.main()
